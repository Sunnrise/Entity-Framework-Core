using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Reflection;
using System.Reflection.Emit;
using Sql_Queries.Configurations;

ApplicationDbContext context = new();


//If you can't express your query with LINQ or if you want to develop a more optimized query than the query generated by LINQ and execute it through EF Core, you should know that EF Core supports this behavior.

//In order to execute queries that are manually created by us through EF Core, an entity model that will receive the result of that query must be designed and this must be defined as DbSet in the context object.

#region FromSqlInterpolated
//FromSqlInterpolated method is used to execute queries that are manually created by us through EF Core. This method is used to execute queries that are created by us and that contain parameters.(Before EF Core 7.0)

var people = await context.Persons.FromSqlInterpolated($"SELECT * FROM Persons").ToListAsync();
FormattableString name = $"Alperen";
#endregion

#region FromSql - EF Core 7.0


#region Query Execute

#endregion
#region Stored Procedure Execute

#endregion
#region Queries with Parameters
#region Sample 1


#endregion
#region Sample 2

#endregion
#region Sample 3

#endregion
#region Sample 4

#endregion
#region Sample 5

#endregion
#endregion
#endregion

#region Dynamic SQL Creation and Take Parameter - FromSqlRaw

#endregion
#region SqlQuery - Non Entity Scalar Queries- Non Entity - EF Core 7.0

#endregion
#region ExecuteSql

#endregion
#region Constraints

#endregion
Console.WriteLine();
public class Person
{
    public int PersonId { get; set; }
    public string Name { get; set; }

    public ICollection<Order> Orders { get; set; }
}
public class Order
{
    public int OrderId { get; set; }
    public int PersonId { get; set; }
    public string Description { get; set; }

    public Person Person { get; set; }
}

class ApplicationDbContext : DbContext
{
    public DbSet<Person> Persons { get; set; }
    public DbSet<Order> Orders { get; set; }
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());

        modelBuilder.Entity<Person>()
            .HasMany(p => p.Orders)
            .WithOne(o => o.Person)
            .HasForeignKey(o => o.PersonId);
    }
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer("Server=localhost, 1433;Database=ApplicationDb;User Id=sa;Password=Password1;TrustServerCertificate=True");
    }
}



//CREATE PROC sp_GetAllPersons
//(
//	@PersonId INT NULL
//)AS
//BEGIN
//	IF @PersonId IS NULL
//		SELECT * FROM Persons
//	ELSE
//		SELECT * FROM Persons WHERE PersonId = @PersonId
//END


